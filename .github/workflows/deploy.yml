# GitHub Pages Deployment Workflow
name: Deploy to GitHub Pages

on:
  # Trigger on push to main branch
  push:
    branches: [ main, master ]
  
  # Trigger on pull request to main branch
  pull_request:
    branches: [ main, master ]
  
  # Allow manual workflow dispatch
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "manager=none" >> $GITHUB_OUTPUT
            echo "command=none" >> $GITHUB_OUTPUT
            echo "runner=none" >> $GITHUB_OUTPUT
          fi

      - name: 🛠️ Setup Node.js (if needed)
        if: steps.detect-package-manager.outputs.manager != 'none'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: 📦 Install dependencies (if needed)
        if: steps.detect-package-manager.outputs.manager != 'none'
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: 🔧 Setup Pages
        uses: actions/configure-pages@v4

      - name: 🏗️ Build PWA
        run: |
          echo "🚀 Building Workout Tracker PWA..."
          
          # Create build directory
          mkdir -p _site
          
          # Copy all files to build directory
          cp -r * _site/ 2>/dev/null || true
          
          # Remove unnecessary files from build
          rm -rf _site/.git
          rm -rf _site/.github
          rm -rf _site/node_modules
          rm -f _site/.gitignore
          rm -f _site/convert-icons.js
          rm -f _site/test-script.js
          rm -f _site/manual-tests.js
          
          # Ensure required files exist
          if [ ! -f "_site/index.html" ]; then
            echo "❌ Error: index.html not found!"
            exit 1
          fi
          
          if [ ! -f "_site/manifest.json" ]; then
            echo "❌ Error: manifest.json not found!"
            exit 1
          fi
          
          if [ ! -f "_site/sw.js" ]; then
            echo "❌ Error: sw.js not found!"
            exit 1
          fi
          
          # Validate PWA manifest
          echo "✅ Validating PWA files..."
          echo "📄 Files in build:"
          ls -la _site/
          
          echo "🔍 Checking manifest.json..."
          cat _site/manifest.json | head -10
          
          echo "✅ Build complete!"

      - name: 📤 Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🎉 Deployment Success
        run: |
          echo "🎉 Workout Tracker PWA deployed successfully!"
          echo "🌐 URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📱 Ready for PWA installation!"